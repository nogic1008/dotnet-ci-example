name: .NET Core CI/CD
on:
  push:
    branches:
      - master
    tags:
      - v*
    paths:
      - '**'
      - '!**.md'
  pull_request:
    paths:
      - '**'
      - '!**.md'

jobs:
  test:
    name: Debug Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        # see https://github.com/dotnet/core/blob/master/release-notes/releases-index.json
        dotnet-version: [3.1]
        include:
          - dotnet-version: 2.1
            dotnet-sdk-version: 2.1.803
          - dotnet-version: 3.0
            dotnet-sdk-version: 3.0.102
          - dotnet-version: 3.1
            dotnet-sdk-version: 3.1.101
          - os: ubuntu-latest
            dotnet-version: 3.1
            is-main: true
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      NUGET_XMLDOC_MODE: skip
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    steps:
      - uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: nuget-${{ runner.os }}-${{ matrix.dotnet-version }}
          restore-keys: |
            nuget-${{ runner.os }}-
      - name: Setup .NET Core ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet-sdk-version }}
      - name: Restore Tool
        if: matrix.is-main
        run: dotnet tool restore
      - name: Lint
        if: matrix.is-main
        run: dotnet format --check --dry-run
      - name: Build
        run: dotnet build -c Debug
      - name: Test
        run: dotnet test -c Debug --no-build --collect:"XPlat Code Coverage" --settings coverlet.runsettings
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  release:
    name: Create Github Release
    if: contains(github.ref, 'tags/v')
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  publish:
    if: contains(github.ref, 'tags/v')
    needs: [test, release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rid: [win-x64, linux-x64, osx-x64]
        # see https://github.com/dotnet/core/blob/master/release-notes/releases-index.json
        dotnet-version: [3.1]
        include:
          - dotnet-version: 2.1
            dotnet-sdk-version: 2.1.803
          - dotnet-version: 3.0
            dotnet-sdk-version: 3.0.102
          - dotnet-version: 3.1
            dotnet-sdk-version: 3.1.101
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      NUGET_XMLDOC_MODE: skip
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    steps:
      - uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: nuget-${{ runner.os }}-${{ matrix.dotnet-version }}
          restore-keys: |
            nuget-${{ runner.os }}-
      - name: Restore File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          echo ::set-output name=file_name::${REPOSITORY_NAME##*/}-${TAG_REF_NAME##*/v}
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
          echo ::set-output name=version::${TAG_REF_NAME##*/v}
        env:
          TAG_REF_NAME: ${{ github.ref }}
          REPOSITORY_NAME: ${{ github.repository }}
      - name: Setup .NET Core ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet-sdk-version }}
      - name: Build
        run: |
          dotnet publish ./Sample.Core/Sample.Core.csproj  -c Release -r ${{ matrix.rid }} /p\:Version=${{ steps.get_release_info.outputs.version }} /p\:PublishSingleFile=true /p\:PublishTrimmed=true -o ./${{ matrix.rid }}
          zip -r ${{ matrix.rid }} ./${{ matrix.rid }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./${{ matrix.rid }}.zip
          asset_name: ${{ steps.get_release_info.outputs.file_name }}-${{ matrix.rid }}-core${{ matrix.dotnet-version }}.zip
          asset_content_type: application/zip
